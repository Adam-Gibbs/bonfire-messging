# serverless.yml
org: adamgibbs
app: ping-messaging
service: ping-messaging

plugins:
  - serverless-python-requirements
  - serverless-dynamodb-local

custom:
  functionPrefix: 'ping-messaging-${self:provider.stage}'
  usersTable: '${self:custom.functionPrefix}.users.v0.3'
  chatsTable: '${self:custom.functionPrefix}.chats.v0.7'
  messagesTable: '${self:custom.functionPrefix}.messages.v0.5'
  chatMembersTable: '${self:custom.functionPrefix}.chatMembers.v0.6'
  mediaTable: '${self:custom.functionPrefix}.media'
  friendRequestsTable: '${self:custom.functionPrefix}.friendRequests.v0.3'
  friendsTable: '${self:custom.functionPrefix}.friends'
  firesTable: '${self:custom.functionPrefix}.fires.v0.4'
  recipientsTable: '${self:custom.functionPrefix}.recipients'
  identityPool: 'pingMessaging${self:provider.stage}'
  pythonRequirements:
    slim: true
    pythonBin: python3
    dockerizePip: non-linux
  dynamodb:
    start:
      migrate: true
    stages:
      - test
      - dev

package:
  individually: false
  exclude:
    - requirements.txt
    - serverless.yml
    - README.md
    - LICENSE.txt
    - '**/*'
  include:
    - './*/*.py'
    - '*.py'

# Need to be more specific here with actions and resources
provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: eu-west-2
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:*
      - s3:*
      - iot:*
      - cognito-idp:*
    Resource: 
      - "*"
      - "arn:aws:s3:::*"
  environment:
    IOT_CHANNEL: /${self:custom.functionPrefix}
    USERS_TABLE: ${self:custom.usersTable}
    CHATS_TABLE: ${self:custom.chatsTable}
    MESSAGES_TABLE: ${self:custom.messagesTable}
    CHAT_MEMBERS_TABLE: ${self:custom.chatMembersTable}
    MEDIA_TABLE: ${self:custom.mediaTable}
    FRIEND_REQUESTS_TABLE: ${self:custom.friendRequestsTable}
    FRIENDS_TABLE: ${self:custom.friendsTable}
    FIRES_TABLE: ${self:custom.firesTable}
    RECIPIENTS_TABLE: ${self:custom.recipientsTable}

functions:
  login:
    handler: auth/login.lambda_handler
    events:
      - http:
          path: /auth/login
          method: post
  refresh_auth:
    handler: auth/refreshAuth.lambda_handler
    events:
      - http:
          path: /auth/refresh
          method: post
  signup:
    handler: auth/signup.lambda_handler
    events:
      - http:
          path: /auth/signup
          method: post
  confirm_signup:
    handler: auth/confirmSignup.lambda_handler
    events:
      - http:
          path: /auth/signup/confirm
          method: post
  resend_code:
    handler: auth/resendCode.lambda_handler
    events:
      - http:
          path: /auth/resendCode
          method: post
  forgot_password:
    handler: auth/forgotPassword.lambda_handler
    events:
      - http:
          path: /auth/forgotPassword
          method: post
  confirm_forgot_password:
    handler: auth/confirmForgotPassword.lambda_handler
    events:
      - http:
          path: /auth/forgotPassword/confirm
          method: post


  getInfo:
    handler: user/getUserInfo.lambda_handler
    events:
      - http:
          path: /user/getInfo
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getFriendRequests:
    handler: user/getFriendRequests.lambda_handler
    events:
      - http:
          path: /user/friendRequests
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  sendFriendRequest:
    handler: user/sendFriendRequest.lambda_handler
    events:
      - http:
          path: /user/friendRequests
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  respondToFriendRequest:
    handler: user/respondToRequest.lambda_handler
    events:
      - http:
          path: /user/respondToRequest
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getFriends:
    handler: user/getFriends.lambda_handler
    events:
      - http:
          path: /user/friends
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer


  sendMessage:
    handler: chat/sendMessage.lambda_handler
    events:
      - http:
          path: /chat/send
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  checkMessages:
    handler: chat/checkMessages.lambda_handler
    events:
      - http:
          path: /chat/retrieve
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer


  getChats:
    handler: chat/getChats.lambda_handler
    events:
      - http:
          path: /chat
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer


  newFire:
    handler: fire/newFire.lambda_handler
    events:
      - http:
          path: /fire/new
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  checkFires:
    handler: fire/getFires.lambda_handler
    events:
      - http:
          path: /fire/nearby
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  respondToFire:
    handler: fire/respondToFire.lambda_handler
    events:
      - http:
          path: /fire/respond
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer


resources:
  Resources:
    # Auth Requirements        
    CognitoUserPoolMyUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: False
        AliasAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: OFF
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
        UserPoolName: ${self:custom.functionPrefix}
        Schema:
          - Name: email
            AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: true
            Required: true
    AppUserPoolWebClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: Web
        GenerateSecret: false
        ReadAttributes:
          - "email"
        UserPoolId:
          Ref: CognitoUserPoolMyUserPool
        WriteAttributes:
          - "email"
    AppCognitoIdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ${self:custom.identityPool}
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ProviderName:
              'Fn::GetAtt': [ CognitoUserPoolMyUserPool, ProviderName ]
            ClientId:
              Ref: AppUserPoolWebClient
    cognitoAuthRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: ${self:custom.identityPool}_Auth_Role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: [ 'sts:AssumeRoleWithWebIdentity' ]
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: AppCognitoIdentityPool
                'ForAnyValue:StringLike':
                    'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName: cognitoauth
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                  - 'iot:Connect'
                  - 'iot:Subscribe'
                  Resource:
                  - "*"
    cognitoUnauthRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: ${self:custom.identityPool}_Unauth_Role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: [ 'sts:AssumeRoleWithWebIdentity' ]
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: AppCognitoIdentityPool
                'ForAnyValue:StringLike':
                    'cognito-identity.amazonaws.com:amr': unauthenticated
        Policies:
          - PolicyName: cognitounauth
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                  - 'iot:Connect'
                  - 'iot:Subscribe'
                  - 'iot:*'
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  Resource:
                  - "*"
    myApiIdentityPoolRoleAttachment:
      DependsOn: [ AppCognitoIdentityPool, cognitoUnauthRole, cognitoAuthRole ]
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId:
          Ref: AppCognitoIdentityPool
        Roles:
          unauthenticated:
            'Fn::GetAtt': [ cognitoUnauthRole, Arn ]
          authenticated:
            'Fn::GetAtt': [ cognitoAuthRole, Arn]

    # API Auth requirements
    ApiGatewayAuthorizer:
      Type: "AWS::ApiGateway::Authorizer"
      Properties:
        Name: UserPool
        ProviderARNs:
          - 'Fn::GetAtt': [ CognitoUserPoolMyUserPool, Arn ]
        RestApiId:
          Ref: ApiGatewayRestApi
        IdentitySource: "method.request.header.Authorization"
        Type: COGNITO_USER_POOLS
    
    # DB stuff
    UsersTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.usersTable}

    ChatsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: chatId
            AttributeType: S
        KeySchema:
          - AttributeName: chatId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.chatsTable}

    MessagesTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: messageId
            AttributeType: S
        KeySchema:
          - AttributeName: messageId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.messagesTable}

    ChatMembersTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: chatMemberId
            AttributeType: S
          - AttributeName: chatMember
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: chatMember-index
            KeySchema:
              - AttributeName: chatMember
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        KeySchema:
          - AttributeName: chatMemberId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.chatMembersTable}

    MediaTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: mediaId
            AttributeType: S
        KeySchema:
          - AttributeName: mediaId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.mediaTable}

    FriendRequestsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: friendRequestId
            AttributeType: S
          - AttributeName: requestTo
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: requestTo-index
            KeySchema:
              - AttributeName: requestTo
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        KeySchema:
          - AttributeName: friendRequestId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.friendRequestsTable}

    FriendsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: friendLinkId
            AttributeType: S
          - AttributeName: friendTo
            AttributeType: S
          - AttributeName: friendOf
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: friendTo-index
            KeySchema:
              - AttributeName: friendTo
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: friendOf-index
            KeySchema:
              - AttributeName: friendOf
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        KeySchema:
          - AttributeName: friendLinkId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.friendsTable}

    FiresTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: fireId
            AttributeType: S
          - AttributeName: publicFire
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: publicFire-index
            KeySchema:
              - AttributeName: publicFire
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        KeySchema:
          - AttributeName: fireId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.firesTable}

    RecipientsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: recipientId
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: username-index
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        KeySchema:
          - AttributeName: recipientId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.recipientsTable}

  Outputs:
    UserPoolId:
      Description: User Pool ID for app to use
      Value:
        Ref: CognitoUserPoolMyUserPool
    UserPoolAppClient:
      Description: App Client ID for app to use
      Value:
        Ref: AppUserPoolWebClient
    IotChannel:
      Description: Root channel that all app communication goes under
      Value: ${self:provider.environment.IOT_CHANNEL}
    IdentityPoolId:
      Description: Identity Pool ID for app to use
      Value:
        Ref: AppCognitoIdentityPool
