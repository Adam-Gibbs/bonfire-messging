# serverless.yml
org: adamgibbs
app: ping-messaging
service: ping-messaging

plugins:
  - serverless-python-requirements
  - serverless-dynamodb-local
  - serverless-wsgi

custom:
  tableName: 'ping-messaging-table-${self:provider.stage}'
  wsgi:
    app: handler.app
    packRequirements: false
    pythonBin: python3
  pythonRequirements:
    slim: true
    pythonBin: python3
    dockerizePip: non-linux
  dynamodb:
    start:
      migrate: true
    stages:
      - test
      - dev

package:
  individually: false
  exclude:
    - '**/*'
  include:
    - handler.py

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: eu-west-2
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:*
      - s3:*
      - iot:*
      - cognito-idp:*
    Resource:
      - { "Fn::GetAtt": ["PingDynamoDBTable", "Arn" ] }
  environment:
    USERS_TABLE: ${self:custom.tableName}

functions:
  getUser:
    handler: wsgi_handler.handler
    events:
      - http:
          path: /users/{user_id}
          method: get

  createUser:
    handler: wsgi_handler.handler
    events:
      - http:
          path: /users
          method: post
  hello:
    handler: wsgi_handler.handler
    events:
      - http:
          path: /
          method: get

resources:
  Resources:
    # Auth requirements
    DeleteUserLambdaFunction:
      Type: "AWS::Lambda::Function"
      Properties:
        Environment:
          Variables:
            USER_POOL_ID:
              Ref: CognitoUserPoolMyUserPool

    ApiGatewayMethodGroupDashchatPost:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Ref: ApiGatewayAuthorizer
    ApiGatewayMethodUserDelete:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Ref: ApiGatewayAuthorizer
    ApiGatewayMethodUserChatsUseridVarDelete:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Ref: ApiGatewayAuthorizer
    ApiGatewayMethodUserLastDashactivityPut:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Ref: ApiGatewayAuthorizer
    ApiGatewayMethodUserGet:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Ref: ApiGatewayAuthorizer
    ApiGatewayMethodUserInvitesGet:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Ref: ApiGatewayAuthorizer
    ApiGatewayMethodUsersOnlineGet:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Ref: ApiGatewayAuthorizer
    ApiGatewayMethodInvitesSendPost:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Ref: ApiGatewayAuthorizer
    ApiGatewayMethodInvitesAcceptPost:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Ref: ApiGatewayAuthorizer
    ApiGatewayMethodUserChatsGet:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Ref: ApiGatewayAuthorizer
    ApiGatewayMethodUserChatsUseridVarMessagesPost:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Ref: ApiGatewayAuthorizer
    ApiGatewayMethodUserChatsUseridVarMessagesGet:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Ref: ApiGatewayAuthorizer
    ApiGatewayAuthorizer:
      Type: "AWS::ApiGateway::Authorizer"
      Properties:
        Name: UserPool
        ProviderARNs:
          - 'Fn::GetAtt': [ CognitoUserPoolMyUserPool, Arn ]
        RestApiId:
          Ref: ApiGatewayRestApi
        IdentitySource: "method.request.header.Authorization"
        Type: COGNITO_USER_POOLS
    
    # DB stuff
    PingDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}